#include "swift_generator.hxx"
#include "../../data_type/np_array.hxx"
#include "../../data_type/np_bool.hxx"
#include "../../data_type/np_double.hxx"
#include "../../data_type/np_int32.hxx"
#include "../../data_type/np_int8.hxx"
#include "../../data_type/np_map.hxx"
#include "../../data_type/np_optional.hxx"
#include "../../data_type/np_string.hxx"
#include "../../string_util/case_conv.hxx"
#include "swift_array_generator.hxx"
#include "swift_bool_generator.hxx"
#include "swift_double_generator.hxx"
#include "swift_int32_generator.hxx"
#include "swift_int8_generator.hxx"
#include "swift_map_generator.hxx"
#include "swift_optional_generator.hxx"
#include "swift_string_generator.hxx"
#include <filesystem>
#include <fstream>

const std::filesystem::path CODE_FILE_EXT(".np.swift");

SwiftGenerator::SwiftGenerator() : data_type_generator_registry() {
	data_type_generator_registry =
		std::make_shared<DataTypeCodeGeneratorRegistry>();

	data_type_generator_registry->add_generator_for_type(
		NanoPack::Bool::IDENTIFIER, std::make_shared<SwiftBoolGenerator>());
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Int8::IDENTIFIER, std::make_shared<SwiftInt8Generator>());
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Int32::IDENTIFIER, std::make_shared<SwiftInt32Generator>());
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Double::IDENTIFIER, std::make_shared<SwiftDoubleGenerator>());
	data_type_generator_registry->add_generator_for_type(
		NanoPack::String::IDENTIFIER, std::make_shared<SwiftStringGenerator>());
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Array::IDENTIFIER,
		std::make_shared<SwiftArrayGenerator>(data_type_generator_registry));
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Map::IDENTIFIER,
		std::make_shared<SwiftMapGenerator>(data_type_generator_registry));
	data_type_generator_registry->add_generator_for_type(
		NanoPack::Optional::IDENTIFIER,
		std::make_shared<SwiftOptionalGenerator>(data_type_generator_registry));
}

void SwiftGenerator::generate_for_schema(const MessageSchema &schema) {
	std::ofstream output_file_stream;
	CodeOutput code_output(output_file_stream);
	std::filesystem::path output_path(schema.schema_path);
	output_path.replace_filename(snake_to_pascal(output_path.filename()))
		.replace_extension(CODE_FILE_EXT);

	output_file_stream.open(output_path);

	// clang-format off
	code_output.stream()
	<< "// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND." << std::endl
	<< std::endl
	<< "import Foundation" << std::endl
	<< "import NanoPack" << std::endl
	<< std::endl
	<< "struct " << schema.message_name << " {" << std::endl;
	// clang-format on

	for (const MessageField &field : schema.fields) {
		std::shared_ptr<DataTypeCodeGenerator> generator =
			find_generator_for_field(field);
		if (generator != nullptr) {
			generator->generate_field_declaration(code_output, field);
		}
	}

	// clang-format off
	code_output.stream()
	<< "}" << std::endl
	<< std::endl
	<< "extension " << schema.message_name << " {" << std::endl
	<< "    public static let typeID: Int32 = " << schema.type_id << std::endl
	<< std::endl
	<< "    init?(data: Data) {" << std::endl
	<< "        guard data.readTypeID() == " << schema.message_name << ".typeID else {" << std::endl
	<< "            return nil" << std::endl
	<< "        }" << std::endl
	<< std::endl
	<< "        var ptr = " << (schema.fields.size() + 1) * 4 << std::endl
	<< std::endl;
	// clang-format on

	for (const MessageField &field : schema.fields) {
		std::shared_ptr<DataTypeCodeGenerator> generator =
			find_generator_for_field(field);
		if (generator != nullptr) {
			generator->generate_read_code(code_output, field);
			code_output.stream() << std::endl;
		}
	}

	// clang-format off
	code_output.stream()
	<< "    }" << std::endl // end init
	<< std::endl
	<< "    func data() -> Data? {" << std::endl
	<< "        var data = Data()" << std::endl
	<< "        data.reserveCapacity(" << (schema.fields.size() + 1) * 4 << ")" << std::endl
	<< std::endl
	<< "        withUnsafeBytes(of: " << schema.message_name << ".typeID) {" << std::endl
	<< "            data.append(contentsOf: $0)" << std::endl
	<< "        }" << std::endl
	<< std::endl
	<< "        data.append([0], count: " << schema.fields.size() * 4 << ")" << std::endl
	<< std::endl;
	// clang-format on

	for (const MessageField &field : schema.fields) {
		std::shared_ptr<DataTypeCodeGenerator> generator =
			find_generator_for_field(field);
		if (generator != nullptr) {
			generator->generate_write_code(code_output, field);
			code_output.stream() << std::endl;
		}
	}

	// clang-format off
	code_output.stream()
	<< "        return data" << std::endl
	<< "    }" << std::endl // end func data()
	<< "}" << std::endl; // end extension
	// clang-format on

	output_file_stream.close();

	const std::string format_cmd =
		"swift-format --in-place " + output_path.string();
	system(format_cmd.c_str());
}

std::shared_ptr<DataTypeCodeGenerator>
SwiftGenerator::find_generator_for_field(const MessageField &field) {
	return data_type_generator_registry->find_generator_for_type(
		field.type.get());
}
