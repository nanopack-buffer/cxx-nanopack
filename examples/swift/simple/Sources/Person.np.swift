// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

struct Person {
  let firstName: String
  let lastName: String
  let age: Int32
}

extension Person {
  public static let typeID: Int32 = 1

  init?(data: Data) {
    guard data.readTypeID() == Person.typeID else {
      return nil
    }

    var ptr = 16

    let firstNameSize = data.readSize(ofField: 0)
    guard let firstName = data.read(at: ptr, withLength: firstNameSize) else {
      return nil
    }
    ptr += firstNameSize
    self.firstName = firstName

    let lastNameSize = data.readSize(ofField: 1)
    guard let lastName = data.read(at: ptr, withLength: lastNameSize) else {
      return nil
    }
    ptr += lastNameSize
    self.lastName = lastName

    let age: Int32 = data.readUnaligned(at: ptr)
    ptr += 4
    self.age = age

  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(16)

    withUnsafeBytes(of: Person.typeID) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 12)

    data.write(size: firstName.lengthOfBytes(using: .utf8), ofField: 0)
    data.append(string: firstName)

    data.write(size: lastName.lengthOfBytes(using: .utf8), ofField: 1)
    data.append(string: lastName)

    data.write(size: 4, ofField: 2)
    data.append(int: age.littleEndian)

    return data
  }
}
